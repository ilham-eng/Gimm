name: Fast Public Server

on:
  workflow_dispatch:

jobs:
  fast-server:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create minimal package.json
      run: |
        echo '{"name":"server","scripts":{"start":"node server.js"},"dependencies":{"express":"^4.18.2"}}' > package.json
        npm install
        echo "✅ Dependencies installed"
        
    - name: Create fast server
      run: |
        cat > server.js << 'EOF'
        const express = require('express');
        const app = express();
        const PORT = 3000;
        
        let count = 0;
        const messages = [];
        
        app.use(express.json());
        
        app.get('/', (req, res) => {
          count++;
          console.log(`Visitor ${count} at ${new Date().toISOString()}`);
          res.json({
            message: '🚀 Server is LIVE!',
            visitors: count,
            messages: messages.length,
            uptime: process.uptime(),
            timestamp: new Date().toISOString()
          });
        });
        
        app.post('/msg', (req, res) => {
          const { text } = req.body;
          messages.push({ text, time: new Date(), id: messages.length + 1 });
          res.json({ success: true, id: messages.length });
        });
        
        app.get('/msg', (req, res) => {
          res.json(messages);
        });
        
        app.get('/health', (req, res) => {
          res.json({ status: 'ok', time: new Date().toISOString() });
        });
        
        console.log('Starting server...');
        app.listen(PORT, '0.0.0.0', () => {
          console.log('Server ready on port ' + PORT);
        });
        EOF
        echo "✅ Server created"

    - name: Start LocalTunnel (FASTEST METHOD)
      id: tunnel
      run: |
        echo "🚀 Starting LocalTunnel..."
        npm install -g localtunnel
        npx localtunnel --port 3000 --print-requests > lt.log 2>&1 &
        sleep 10
        LT_URL=$(grep -o "https://[a-zA-Z0-9.-]*\.loca\.lt" lt.log | head -1)
        echo "🎉 PUBLIC URL: $LT_URL"
        echo "PUBLIC_URL=$LT_URL" >> $GITHUB_ENV
        echo "url=$LT_URL" >> $GITHUB_OUTPUT
        
    - name: Start Server
      run: |
        echo "🔥 Starting Node.js server..."
        npm start &
        echo "✅ Server started"
        sleep 3
        echo "🧪 Testing locally..."
        curl -s http://localhost:3000/health

    - name: Test Public URL
      run: |
        echo "🌐 Testing Public URL: $PUBLIC_URL"
        sleep 5
        curl -s "$PUBLIC_URL/" | grep -o '"message":"[^"]*"' || echo "Testing public URL..."
        echo ""
        echo "✅ Public URL is ready!"

    - name: Show Success Message
      run: |
        echo ""
        echo "🎉 ==========================================="
        echo "🎉    YOUR SERVER IS PUBLICLY ACCESSIBLE!"
        echo "🎉 ==========================================="
        echo ""
        echo "🌐 PUBLIC URL:"
        echo "   $PUBLIC_URL"
        echo ""
        echo "📚 ENDPOINTS:"
        echo "   $PUBLIC_URL/          - Server info"
        echo "   $PUBLIC_URL/health    - Health check"
        echo "   $PUBLIC_URL/msg       - GET messages"
        echo "   $PUBLIC_URL/msg       - POST messages"
        echo ""
        echo "🛠️ TEST COMMANDS:"
        echo "   curl $PUBLIC_URL/"
        echo "   curl $PUBLIC_URL/health"
        echo "   curl $PUBLIC_URL/msg"
        echo "   curl -X POST $PUBLIC_URL/msg -H 'Content-Type: application/json' -d '{\"text\":\"Hello!\"}'"
        echo ""
        echo "⏰ SERVER WILL RUN FOR 6 HOURS"
        echo "📊 Check logs above for real-time visitor count"
        echo ""
        echo "🎉 ==========================================="
        echo "   Share this URL: $PUBLIC_URL"
        echo "🎉 ==========================================="

    - name: Keep Alive with Visitor Counter
      run: |
        echo "👀 Monitoring server activity..."
        echo "📍 Local: http://localhost:3000"
        echo "🌐 Public: $PUBLIC_URL"
        echo ""
        echo "Visitors will be logged above in real-time ⬆️"
        echo "Server running until timeout (6 hours)..."
        
        # Keep-alive loop
        for i in {1..360}; do
          sleep 60
          echo "⏰ Still running... ($i/360 minutes)"
        done

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        pkill -f node || true
        echo "✅ Done"
