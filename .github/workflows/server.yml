name: Persistent Server with Serveo

on:
  workflow_dispatch:

jobs:
  serveo-server:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create package.json using echo
      run: |
        echo 'Creating package.json...'
        echo '{' > package.json
        echo '  "name": "gimm-server",' >> package.json
        echo '  "version": "1.0.0",' >> package.json
        echo '  "description": "Persistent server for GitHub Actions",' >> package.json
        echo '  "main": "server.js",' >> package.json
        echo '  "scripts": {' >> package.json
        echo '    "start": "node server.js"' >> package.json
        echo '  },' >> package.json
        echo '  "dependencies": {' >> package.json
        echo '    "express": "^4.18.2"' >> package.json
        echo '  }' >> package.json
        echo '}' >> package.json
        echo "‚úÖ package.json created"
        cat package.json
        
    - name: Install dependencies
      run: |
        npm install
        echo "‚úÖ Dependencies installed"
        
    - name: Create server.js using printf
      run: |
        echo "Creating server.js..."
        printf '%s\n' \
          'const express = require("express");' \
          'const app = express();' \
          'const PORT = 3000;' \
          '' \
          'app.use(express.json());' \
          '' \
          'let serverData = {' \
          '  visitors: 0,' \
          '  messages: [],' \
          '  startTime: new Date().toISOString(),' \
          '  requests: 0' \
          '};' \
          '' \
          'app.use((req, res, next) => {' \
          '  serverData.requests++;' \
          '  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);' \
          '  next();' \
          '});' \
          '' \
          'app.get("/", (req, res) => {' \
          '  serverData.visitors++;' \
          '  res.json({' \
          '    message: "üöÄ Server is LIVE with Serveo!",' \
          '    status: "ACTIVE",' \
          '    visitors: serverData.visitors,' \
          '    totalMessages: serverData.messages.length,' \
          '    serverUptime: Math.floor(process.uptime()) + " seconds",' \
          '    startTime: serverData.startTime,' \
          '    timestamp: new Date().toISOString(),' \
          '    endpoints: [' \
          '      "GET  /",' \
          '      "GET  /status",' \
          '      "GET  /messages",' \
          '      "POST /messages",' \
          '      "GET  /info",' \
          '      "GET  /health"' \
          '    ]' \
          '  });' \
          '});' \
          '' \
          'app.get("/status", (req, res) => {' \
          '  res.json({' \
          '    status: "üü¢ ONLINE",' \
          '    metrics: {' \
          '      visitors: serverData.visitors,' \
          '      messages: serverData.messages.length,' \
          '      totalRequests: serverData.requests,' \
          '      uptime: Math.floor(process.uptime()) + " seconds",' \
          '      memory: process.memoryUsage()' \
          '    },' \
          '    timestamp: new Date().toISOString()' \
          '  });' \
          '});' \
          '' \
          'app.get("/messages", (req, res) => {' \
          '  res.json({' \
          '    count: serverData.messages.length,' \
          '    messages: serverData.messages' \
          '  });' \
          '});' \
          '' \
          'app.post("/messages", (req, res) => {' \
          '  const { text, author = "Anonymous" } = req.body;' \
          '  ' \
          '  if (!text || text.trim() === "") {' \
          '    return res.status(400).json({ ' \
          '      error: "Message text is required",' \
          '      example: { "text": "Hello World!", "author": "Your Name" }' \
          '    });' \
          '  }' \
          '' \
          '  const newMessage = {' \
          '    id: Date.now(),' \
          '    text: text.trim(),' \
          '    author: author,' \
          '    timestamp: new Date().toISOString()' \
          '  };' \
          '' \
          '  serverData.messages.push(newMessage);' \
          '  ' \
          '  if (serverData.messages.length > 100) {' \
          '    serverData.messages = serverData.messages.slice(-100);' \
          '  }' \
          '' \
          '  res.json({' \
          '    success: true,' \
          '    message: "‚úÖ Message saved successfully!",' \
          '    data: newMessage,' \
          '    totalMessages: serverData.messages.length' \
          '  });' \
          '});' \
          '' \
          'app.get("/info", (req, res) => {' \
          '  res.json({' \
          '    serverInfo: {' \
          '      name: "Gimm Server",' \
          '      version: "1.0.0",' \
          '      nodeVersion: process.version,' \
          '      platform: process.platform,' \
          '      startTime: serverData.startTime,' \
          '      uptime: Math.floor(process.uptime()) + " seconds"' \
          '    },' \
          '    usage: {' \
          '      totalVisitors: serverData.visitors,' \
          '      totalMessages: serverData.messages.length,' \
          '      totalRequests: serverData.requests' \
          '    }' \
          '  });' \
          '});' \
          '' \
          'app.get("/health", (req, res) => {' \
          '  res.json({' \
          '    status: "healthy",' \
          '    timestamp: new Date().toISOString(),' \
          '    uptime: process.uptime()' \
          '  });' \
          '});' \
          '' \
          'app.use("*", (req, res) => {' \
          '  res.status(404).json({' \
          '    error: "Endpoint not found",' \
          '    availableEndpoints: [' \
          '      "GET  /",' \
          '      "GET  /status", ' \
          '      "GET  /messages",' \
          '      "POST /messages",' \
          '      "GET  /info",' \
          '      "GET  /health"' \
          '    ]' \
          '  });' \
          '});' \
          '' \
          'console.log("üöÄ Starting server...");' \
          'app.listen(PORT, "0.0.0.0", () => {' \
          '  console.log("‚úÖ Server running on port " + PORT);' \
          '  console.log("üìç Local: http://localhost:" + PORT);' \
          '  console.log("üåê Waiting for Serveo public URL...");' \
          '  console.log("üìä Endpoints ready!");' \
          '});' > server.js
        
        echo "‚úÖ server.js created"
        echo "Server file size: $(wc -l < server.js) lines"

    - name: Install SSH and setup Serveo tunnel
      run: |
        echo "üîß Installing SSH client..."
        sudo apt-get update
        sudo apt-get install -y openssh-client
        
    - name: Start Serveo SSH Tunnel and Get URL
      id: serveo
      run: |
        echo "üîó Starting Serveo SSH tunnel..."
        
        # Function to start serveo and get URL
        start_serveo() {
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -R 80:localhost:3000 serveo.net 2>&1 | \
          while IFS= read -r line; do
            echo "Serveo: $line"
            if echo "$line" | grep -q "forwarding"; then
              SERVEO_URL=$(echo "$line" | grep -oE 'https://[a-zA-Z0-9.-]+\.serveo\.net')
              echo "üéâ PUBLIC URL FOUND: $SERVEO_URL"
              echo "SERVEO_URL=$SERVEO_URL" >> $GITHUB_ENV
              echo "url=$SERVEO_URL" >> $GITHUB_OUTPUT
              break
            fi
          done
        }
        
        # Start in background
        start_serveo &
        SERVEO_PID=$!
        echo "SERVEO_PID=$SERVEO_PID" >> $GITHUB_ENV
        echo "Serveo tunnel PID: $SERVEO_PID"
        
        # Wait for URL to be established
        sleep 20

    - name: Start Node.js Server
      run: |
        echo "üöÄ Starting Node.js server..."
        npm start &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        echo "Server PID: $SERVER_PID"
        sleep 8

    - name: Test Server Endpoints
      run: |
        echo "üß™ Testing server endpoints..."
        
        if [ -n "$SERVEO_URL" ]; then
          echo "üåê Testing via Serveo URL: $SERVEO_URL"
          
          # Test main endpoint
          echo "1. Testing GET /"
          curl -s -f "$SERVEO_URL/" || echo "Main endpoint test failed"
          echo ""
          
          sleep 2
          
          # Test status endpoint
          echo "2. Testing GET /status"
          curl -s -f "$SERVEO_URL/status" || echo "Status endpoint test failed"
          echo ""
          
          sleep 2
          
          # Test health endpoint
          echo "3. Testing GET /health"
          curl -s -f "$SERVEO_URL/health" || echo "Health endpoint test failed"
          echo ""
          
          sleep 2
          
          # Test message posting
          echo "4. Testing POST /messages"
          curl -s -X POST "$SERVEO_URL/messages" \
            -H "Content-Type: application/json" \
            -d '{"text":"Server is successfully deployed with Serveo! üéâ", "author":"System"}' || \
          echo "Message post test failed"
          echo ""
          
        else
          echo "‚ùå Serveo URL not available, testing locally..."
          curl -s http://localhost:3000 || echo "Local test failed"
        fi

    - name: Display Public Access Information
      run: |
        echo ""
        echo "üéâ ==================================================="
        echo "üéâ         SERVER DEPLOYMENT SUCCESSFUL!"
        echo "üéâ ==================================================="
        echo ""
        
        if [ -n "$SERVEO_URL" ]; then
          echo "üåê YOUR PUBLIC SERVER URL:"
          echo "   $SERVEO_URL"
          echo ""
          echo "üìö AVAILABLE ENDPOINTS:"
          echo "   $SERVEO_URL/"
          echo "   $SERVEO_URL/status"
          echo "   $SERVEO_URL/messages"
          echo "   $SERVEO_URL/info" 
          echo "   $SERVEO_URL/health"
          echo ""
          echo "üõ†Ô∏è QUICK TEST COMMANDS:"
          echo "   curl $SERVEO_URL/"
          echo "   curl $SERVEO_URL/status"
          echo "   curl $SERVEO_URL/messages"
          echo "   curl -X POST $SERVEO_URL/messages \\"
          echo "     -H 'Content-Type: application/json' \\"
          echo "     -d '{\"text\":\"Hello World!\", \"author\":\"YourName\"}'"
        else
          echo "‚ùå No public URL available. Using localhost:"
          echo "   http://localhost:3000"
        fi
        
        echo ""
        echo "‚è∞ SERVER STATUS:"
        echo "   ‚úÖ Node.js Server: RUNNING"
        echo "   ‚úÖ SSH Tunnel: ACTIVE" 
        echo "   üïí Duration: Up to 6 hours"
        echo ""
        echo "üîç MONITORING:"
        echo "   Check workflow logs for real-time output"
        echo ""
        echo "üéâ ==================================================="
        echo "   Share the URL with others to test your server!"
        echo "üéâ ==================================================="

    - name: Keep Server Running
      run: |
        echo "üîÑ Server and SSH tunnel are now running..."
        echo "‚è∞ Started at: $(date)"
        echo "üõë To stop manually, cancel this workflow in GitHub Actions"
        echo ""
        echo "üìä Monitoring server activity..."
        
        # Show initial test
        if [ -n "$SERVEO_URL" ]; then
          echo "üîç Initial health check:"
          curl -s "$SERVEO_URL/health" || echo "Health check failed"
          echo ""
        fi
        
        # Counter to show server is alive
        COUNTER=0
        while [ $COUNTER -lt 360 ]; do  # 6 hours max
          sleep 60
          COUNTER=$((COUNTER + 1))
          MINUTES=$((COUNTER))
          echo "‚è±Ô∏è Server has been running for $MINUTES minutes..."
          
          # Test server health periodically
          if [ $((COUNTER % 10)) -eq 0 ] && [ -n "$SERVEO_URL" ]; then
            echo "üîç Health check: $(curl -s "$SERVEO_URL/health" | grep -o '"status":"[^"]*"' || echo "status:unknown")"
          fi
        done
        
        echo "üïí 6-hour time limit reached, stopping server..."

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up processes..."
        # Kill processes
        pkill -f "node server.js" || true
        pkill -f "ssh.*serveo.net" || true
        echo "‚úÖ Cleanup completed"
